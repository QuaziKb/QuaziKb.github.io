"use strict";

function createShader(gl, type, source) {
  var shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
  if (success) {
    return shader;
  }

  console.log(gl.getShaderInfoLog(shader));
  gl.deleteShader(shader);
}

function createProgram(gl, vertexShader, fragmentShader) {
  var program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  var success = gl.getProgramParameter(program, gl.LINK_STATUS);
  if (success) {
    return program;
  }

  console.log(gl.getProgramInfoLog(program));
  gl.deleteProgram(program);
}

//create common 2D shader with all the standard attributes/uniforms
class Shader2D {
    constructor(gl,vs_name,fs_name) {
        var vs_src = document.getElementById(vs_name).text;
        var fs_src = document.getElementById(fs_name).text;
        var vs = createShader(gl, gl.VERTEX_SHADER, vs_src);
        var fs = createShader(gl, gl.FRAGMENT_SHADER, fs_src);
        this.program = createProgram(gl, vs, fs);
        this.position_attr = gl.getAttribLocation(program, "a_position");
        this.texcoord_attr = gl.getAttribLocation(program, "a_texcoord");
        gl.enableVertexAttribArray(this.position_attr);
        gl.enableVertexAttribArray(this.texcoord_attr);
    }
    
    bind_buffers(position_buffer,texcoord_buffer) {
        {
            gl.bindBuffer(gl.ARRAY_BUFFER, position_buffer);
            // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)
            var size = 2;          // 2 components per iteration
            var type = gl.FLOAT;   // the data is 32bit floats
            var normalize = false; // don't normalize the data
            var stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position
            var offset = 0;        // start at the beginning of the buffer
            gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);
        }
        {
            gl.bindBuffer(gl.ARRAY_BUFFER, texcoord_buffer);
            var size = 2;          // 2 components per iteration
            var type = gl.FLOAT;   // the data is 32bit floats
            var normalize = false; // don't normalize the data
            var stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position
            var offset = 0;        // start at the beginning of the buffer
            gl.vertexAttribPointer(texcoordLocation, size, type, normalize, stride, offset);
        }        
    }
}

function main() {
// Get A WebGL context
var canvas = document.getElementById("c");
var gl = canvas.getContext("webgl");
if (!gl) {
  return;
}

// Get the strings for our GLSL shaders
var vertexShaderSource = document.getElementById("2d-vertex-shader").text;
var fragmentShaderSource = document.getElementById("2d-fragment-shader").text;

// create GLSL shaders, upload the GLSL source, compile the shaders
var vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
var fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);

// Link the two shaders into a program
var program = createProgram(gl, vertexShader, fragmentShader);

// look up where the vertex data needs to go.
var texcoordLocation = gl.getAttribLocation(program, "a_texcoord");
var positionAttributeLocation = gl.getAttribLocation(program, "a_position");
// Turn on the attribute
gl.enableVertexAttribArray(positionAttributeLocation);
gl.enableVertexAttribArray(texcoordLocation);

// Create a buffer and put three 2d clip space points in it
var positionBuffer = gl.createBuffer();

// Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)
gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);

var positions = [
    -1.0,-1.0,
    -1.0, 1.0,
     1.0, 1.0,
     1.0, 1.0,
     1.0,-1.0,
    -1.0,-1.0
];

gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

// Create a buffer for texcoords.
// provide texture coordinates for the rectangle.
var texcoordBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);
// Set Texcoords.
// Fill the buffer with texture coordinates for the F.
function setTexcoords(gl) {
  gl.bufferData(
      gl.ARRAY_BUFFER,
      new Float32Array([
        0, 1,
        0, 0,
        1, 0,
        1, 0,
        1, 1,
        0, 1,
       ]),
       gl.STATIC_DRAW);
}
setTexcoords(gl);
// Create a texture.
var texture = gl.createTexture();
gl.bindTexture(gl.TEXTURE_2D, texture);
 
// Fill the texture with a 1x1 blue pixel.
gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,
              new Uint8Array([0, 0, 255, 255]));
 
// Asynchronously load an image
var image = new Image();
image.src = "texture.png";
image.addEventListener('load', function() {
  // Now that the image has loaded make copy it to the texture.
  gl.activeTexture(gl.TEXTURE0);
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,gl.UNSIGNED_BYTE, image);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  gl.generateMipmap(gl.TEXTURE_2D);
  gl.activeTexture(gl.TEXTURE1);
  gl.bindTexture(gl.TEXTURE_2D, texture);
});

// code above this line is initialization code.
// code below this line is rendering code.

// webglUtils.resizeCanvasToDisplaySize(gl.canvas);
gl.canvas.width= 512
gl.canvas.height= 512

// Tell WebGL how to convert from clip space to pixels
gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

// Clear the canvas
gl.clearColor(0, 0, 0, 1);
gl.clear(gl.COLOR_BUFFER_BIT);

// Tell the texcoord attribute how to get data out of texcoordBuffer (ARRAY_BUFFER)
var size = 2;          // 2 components per iteration
var type = gl.FLOAT;   // the data is 32bit floats
var normalize = false; // don't normalize the data
var stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position
var offset = 0;        // start at the beginning of the buffer
gl.vertexAttribPointer(
    texcoordLocation, size, type, normalize, stride, offset);
// Bind the position buffer.
gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
// Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)
var size = 2;          // 2 components per iteration
var type = gl.FLOAT;   // the data is 32bit floats
var normalize = false; // don't normalize the data
var stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position
var offset = 0;        // start at the beginning of the buffer
gl.vertexAttribPointer(
    positionAttributeLocation, size, type, normalize, stride, offset)
// Tell it to use our program (pair of shaders)
gl.useProgram(program);

// draw
var primitiveType = gl.TRIANGLES;
var offset = 0;
var count = 6;  
  
var slider3_UniformLocation = gl.getUniformLocation(program,"slider3")
var t_UniformLocation = gl.getUniformLocation(program,"t")
var textureLocation = gl.getUniformLocation(program, "u_texture");
var matrixLocation = gl.getUniformLocation(program, "u_matrix");

// setup

var slider_x = new QZMath.createSlider("x",0,-1,1,0.001);
var slider_y = new QZMath.createSlider("y",0,-1,1,0.001);
var slider_z = new QZMath.createSlider("z",1,0,1,0.001);	

//render to texture stuff (https://webglfundamentals.org/webgl/lessons/webgl-render-to-texture.html)
// create to render to
const targetTextureWidth = 512;
const targetTextureHeight = 512;
const level = 0;
var current_fb = 0
const targetTexture = [gl.createTexture(), gl.createTexture()];
// Create the framebuffers
const fb = [gl.createFramebuffer(),gl.createFramebuffer()]; //need two because you can't have a feedback loop on one texture
for (var i = 0; i < 2; i++) {
    gl.bindTexture(gl.TEXTURE_2D, targetTexture[i]);
    {
    // define size and format of level 0
    
    const internalFormat = gl.RGBA;
    const border = 0;
    const format = gl.RGBA;
    const type = gl.UNSIGNED_BYTE;
    const data = null;
    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,
                    targetTextureWidth, targetTextureHeight, border,
                    format, type, data);
    
    // set the filtering so we don't need mips
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    }
}
const attachmentPoint = gl.COLOR_ATTACHMENT0;
gl.bindFramebuffer(gl.FRAMEBUFFER, fb[1]);
// attach the texture as the first color attachment
gl.framebufferTexture2D(
    gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, targetTexture[1], level);

gl.bindFramebuffer(gl.FRAMEBUFFER, fb[0]);
// attach the texture as the first color attachment
gl.framebufferTexture2D(
    gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, targetTexture[0], level);

gl.activeTexture(gl.TEXTURE0);
gl.bindTexture(gl.TEXTURE_2D, texture);
gl.activeTexture(gl.TEXTURE1);
gl.bindTexture(gl.TEXTURE_2D, texture);

var matrix_I = [1,0,0,
                0,1,0,
                0,0,1]
var matrix_slider = [1,0,0,
                     0,1,0,
                     0,0,1]
// render loop
var animate = function () {
	
	//update time data
	frame++;
	current_time_ms=performance.now();
	dt_ms=current_time_ms-prev_time_ms;
	dt_s=dt_ms/1000;
	t=t+dt_s*dt_scale;
	matrix_slider[0] = slider_z.value
    matrix_slider[4] = slider_z.value
    matrix_slider[6] = slider_x.value
    matrix_slider[7] = slider_y.value
    
	gl.uniform3f(slider3_UniformLocation,slider_x.value,slider_y.value,slider_z.value);
    gl.uniform1f(t_UniformLocation,t)
    // Set the matrix.    
    // Tell the shader to use texture unit 0 for u_texture	
	// render to our targetTexture by binding the framebuffer
    gl.bindFramebuffer(gl.FRAMEBUFFER, fb[current_fb]);
    gl.uniform1i(textureLocation, 1);
    gl.uniformMatrix3fv(matrixLocation, false, matrix_I);
    gl.drawArrays(primitiveType, offset, count);
    // render to the canvas
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    //gl.uniform1i(textureLocation, 1);
    // render the cube with the texture we just rendered to
    gl.bindTexture(gl.TEXTURE_2D, targetTexture[current_fb]);
    gl.uniform1i(textureLocation, 1);
    gl.drawArrays(primitiveType, offset, count);
    gl.uniform1i(textureLocation, 0);
    gl.uniformMatrix3fv(matrixLocation, false, matrix_slider);
    gl.drawArrays(primitiveType, offset, count);
    gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, 512, 512, 0);
    current_fb = 1-current_fb
	
    
    
    prev_time_ms=current_time_ms;
	
	requestAnimationFrame(animate);
};

//---------------------------------------------------------------------------------------intialize time/frame data
var frame=0;
var start_time_ms=performance.now();
var current_time_ms=start_time_ms;
var prev_time_ms=start_time_ms;
var current_time_ms=0;
var dt_ms=0;
var dt_s=0;
var t=0; //current time in ms with timescale effects accounted for
var dt_scale=1;
//---------------------------------------------------------------------------------------run animation
animate();
  
}

main();